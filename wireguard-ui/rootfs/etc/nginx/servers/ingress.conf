#
# Wireguard UI has multiple session cookies.
#
# Home Assistant ingress endpoints support only a single Set-Cookie header.
#   https://github.com/home-assistant/supervisor/issues/4290
#
# Backend to frontend
#   The following map and cookie configs read cookies from backend and combine
#   them into a single Set-Cooke before sending to client through frontend.
#
# Frontend to backend
#   When client sends back the combined cookie the cookies are then split up
#   again before being sent to backend.
################################################################################

#
# Map to combine wgui_ prefixed session cookies into wgui_super_session
# (from backend to frontend)
#
# https://stackoverflow.com/questions/78772989/nginx-auth-request-alternative-for-multiple-cookies-no-lua
map "$upstream_cookie_wgui_session_token:$upstream_cookie_wgui_session" $wgui_super_session {
    "~^([^:]+:[^:]+)$" "wgui_super_session=$1; Path=/api/hassio_ingress/; HttpOnly; SameSite=Lax";
    #"~^([^:]+:[^:]+)$" "wgui_super_session=$1; Path=/; HttpOnly; SameSite=Lax";
    default '';
}

#
# Maps to break up the combined cookie
# (from frontend to backend)
#
map $http_cookie $wgui_session_token_cookie {
    "~*wgui_super_session=([^:]+):" "wgui_session_token=$1";
    default '';
}
map $http_cookie $wgui_session_cookie {
    "~*wgui_super_session=[^:]+:([^;]+)" "wgui_session=$1";
    default '';
}
# Send both cookies or no cookies from frontend to backend
map "$wgui_session_token_cookie; $wgui_session_cookie" $wgui_multiple_cookies {
  "~^(wgui_session_token=[^;]+; wgui_session=.+)$" $1;
  default '';
}

server {
    listen %%interface%%:8099 default_server;

    include /etc/nginx/includes/server_params.conf;
    include /etc/nginx/includes/proxy_params.conf;

    location / {
        allow   172.30.32.2;
        deny    all;

        # https://serverfault.com/questions/162429/how-do-i-add-access-control-allow-origin-in-nginx
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' '*.github.com';
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type';
            add_header 'Access-Control-Max-Age' 1728000; # valid for 20 days
            add_header 'Content-Type' 'text/plain  charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }

        # Login sessions
        # Response: Remove all backend Set-Cookie headers.
        proxy_hide_header Set-Cookie;
        # Response: Set only our combined cookie; end-user only gets
        # wgui_super_session cookie.
        add_header Set-Cookie $wgui_super_session;
        # Request: send wgui_session and wgui_session_token cookies to backend
        proxy_set_header Cookie $wgui_multiple_cookies;

        # https://github.com/EmbarkStudios/wg-ui/issues/94
        sub_filter_types *;
        sub_filter_once off;
        sub_filter 'O.p="/"'  "O.p=\"$http_x_ingress_path/\"";
        sub_filter 'href:"/'  "href:\"$http_x_ingress_path/";
        sub_filter 'src="/'  "src=\"$http_x_ingress_path/";
        #sub_filter '/api' "$http_x_ingress_path/api";
        sub_filter 'path:"' "path:\"$http_x_ingress_path/";
        sub_filter '"/new-client"' "\"$http_x_ingress_path/new-client\"";
        sub_filter '"/client/"' "\"$http_x_ingress_path/client/\"";
        sub_filter '"/",{replace' "\"$http_x_ingress_path/\",{replace";
        sub_filter 'href="/'  "href=\"$http_x_ingress_path/";

        # added since converting this addon to https://github.com/ngoduykhanh/wireguard-ui
        sub_filter 'url: \'/' "url: '$http_x_ingress_path/";
        sub_filter "href = '/" "href = '$http_x_ingress_path/";
        sub_filter "href='/" "href='$http_x_ingress_path/";
        sub_filter 'var base_url = jQuery(".brand-link").attr(\'href\')' "var base_url = '$http_x_ingress_path/'";
        sub_filter '/api/subnet-ranges' "$http_x_ingress_path/api/subnet-ranges"
        sub_filter '/api/suggest-client-ips' "$http_x_ingress_path/api/suggest-client-ips"

        # login pages and redirects
        proxy_redirect ~^(\/[^?]+)(\?next=)\/(.*)$ "$http_x_ingress_path$1$2$http_x_ingress_path/$3";
        proxy_redirect / "$http_x_ingress_path/";
        absolute_redirect off;

        proxy_pass http://backend/;
    }
}
